// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common_proto/mysql_database_test.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_5fproto_2fmysql_5fdatabase_5ftest_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_common_5fproto_2fmysql_5fdatabase_5ftest_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "db_base.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_common_5fproto_2fmysql_5fdatabase_5ftest_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_common_5fproto_2fmysql_5fdatabase_5ftest_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_common_5fproto_2fmysql_5fdatabase_5ftest_2eproto;
class account_database_all_test;
struct account_database_all_testDefaultTypeInternal;
extern account_database_all_testDefaultTypeInternal _account_database_all_test_default_instance_;
class account_database_one_test;
struct account_database_one_testDefaultTypeInternal;
extern account_database_one_testDefaultTypeInternal _account_database_one_test_default_instance_;
class database_node_db;
struct database_node_dbDefaultTypeInternal;
extern database_node_dbDefaultTypeInternal _database_node_db_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class database_node_db final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:database_node_db) */ {
 public:
  inline database_node_db() : database_node_db(nullptr) {}
  ~database_node_db() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR database_node_db(::google::protobuf::internal::ConstantInitialized);

  inline database_node_db(const database_node_db& from)
      : database_node_db(nullptr, from) {}
  database_node_db(database_node_db&& from) noexcept
    : database_node_db() {
    *this = ::std::move(from);
  }

  inline database_node_db& operator=(const database_node_db& from) {
    CopyFrom(from);
    return *this;
  }
  inline database_node_db& operator=(database_node_db&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const database_node_db& default_instance() {
    return *internal_default_instance();
  }
  static inline const database_node_db* internal_default_instance() {
    return reinterpret_cast<const database_node_db*>(
               &_database_node_db_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(database_node_db& a, database_node_db& b) {
    a.Swap(&b);
  }
  inline void Swap(database_node_db* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(database_node_db* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  database_node_db* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<database_node_db>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const database_node_db& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const database_node_db& from) {
    database_node_db::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(database_node_db* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "database_node_db";
  }
  protected:
  explicit database_node_db(::google::protobuf::Arena* arena);
  database_node_db(::google::protobuf::Arena* arena, const database_node_db& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbHostFieldNumber = 2,
    kDbUserFieldNumber = 3,
    kDbPasswordFieldNumber = 4,
    kDbDbnameFieldNumber = 5,
    kIdFieldNumber = 1,
    kDbPortFieldNumber = 6,
  };
  // string db_host = 2;
  void clear_db_host() ;
  const std::string& db_host() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_db_host(Arg_&& arg, Args_... args);
  std::string* mutable_db_host();
  PROTOBUF_NODISCARD std::string* release_db_host();
  void set_allocated_db_host(std::string* value);

  private:
  const std::string& _internal_db_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_host(
      const std::string& value);
  std::string* _internal_mutable_db_host();

  public:
  // string db_user = 3;
  void clear_db_user() ;
  const std::string& db_user() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_db_user(Arg_&& arg, Args_... args);
  std::string* mutable_db_user();
  PROTOBUF_NODISCARD std::string* release_db_user();
  void set_allocated_db_user(std::string* value);

  private:
  const std::string& _internal_db_user() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_user(
      const std::string& value);
  std::string* _internal_mutable_db_user();

  public:
  // string db_password = 4;
  void clear_db_password() ;
  const std::string& db_password() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_db_password(Arg_&& arg, Args_... args);
  std::string* mutable_db_password();
  PROTOBUF_NODISCARD std::string* release_db_password();
  void set_allocated_db_password(std::string* value);

  private:
  const std::string& _internal_db_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_password(
      const std::string& value);
  std::string* _internal_mutable_db_password();

  public:
  // string db_dbname = 5;
  void clear_db_dbname() ;
  const std::string& db_dbname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_db_dbname(Arg_&& arg, Args_... args);
  std::string* mutable_db_dbname();
  PROTOBUF_NODISCARD std::string* release_db_dbname();
  void set_allocated_db_dbname(std::string* value);

  private:
  const std::string& _internal_db_dbname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db_dbname(
      const std::string& value);
  std::string* _internal_mutable_db_dbname();

  public:
  // uint32 id = 1;
  void clear_id() ;
  ::uint32_t id() const;
  void set_id(::uint32_t value);

  private:
  ::uint32_t _internal_id() const;
  void _internal_set_id(::uint32_t value);

  public:
  // uint32 db_port = 6;
  void clear_db_port() ;
  ::uint32_t db_port() const;
  void set_db_port(::uint32_t value);

  private:
  ::uint32_t _internal_db_port() const;
  void _internal_set_db_port(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:database_node_db)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      59, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr db_host_;
    ::google::protobuf::internal::ArenaStringPtr db_user_;
    ::google::protobuf::internal::ArenaStringPtr db_password_;
    ::google::protobuf::internal::ArenaStringPtr db_dbname_;
    ::uint32_t id_;
    ::uint32_t db_port_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_5fproto_2fmysql_5fdatabase_5ftest_2eproto;
};// -------------------------------------------------------------------

class account_database_one_test final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:account_database_one_test) */ {
 public:
  inline account_database_one_test() : account_database_one_test(nullptr) {}
  ~account_database_one_test() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR account_database_one_test(::google::protobuf::internal::ConstantInitialized);

  inline account_database_one_test(const account_database_one_test& from)
      : account_database_one_test(nullptr, from) {}
  account_database_one_test(account_database_one_test&& from) noexcept
    : account_database_one_test() {
    *this = ::std::move(from);
  }

  inline account_database_one_test& operator=(const account_database_one_test& from) {
    CopyFrom(from);
    return *this;
  }
  inline account_database_one_test& operator=(account_database_one_test&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const account_database_one_test& default_instance() {
    return *internal_default_instance();
  }
  static inline const account_database_one_test* internal_default_instance() {
    return reinterpret_cast<const account_database_one_test*>(
               &_account_database_one_test_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(account_database_one_test& a, account_database_one_test& b) {
    a.Swap(&b);
  }
  inline void Swap(account_database_one_test* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(account_database_one_test* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  account_database_one_test* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<account_database_one_test>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const account_database_one_test& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const account_database_one_test& from) {
    account_database_one_test::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(account_database_one_test* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "account_database_one_test";
  }
  protected:
  explicit account_database_one_test(::google::protobuf::Arena* arena);
  account_database_one_test(::google::protobuf::Arena* arena, const account_database_one_test& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string account = 1;
  void clear_account() ;
  const std::string& account() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_account(Arg_&& arg, Args_... args);
  std::string* mutable_account();
  PROTOBUF_NODISCARD std::string* release_account();
  void set_allocated_account(std::string* value);

  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(
      const std::string& value);
  std::string* _internal_mutable_account();

  public:
  // string password = 2;
  void clear_password() ;
  const std::string& password() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_password(Arg_&& arg, Args_... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* value);

  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(
      const std::string& value);
  std::string* _internal_mutable_password();

  public:
  // @@protoc_insertion_point(class_scope:account_database_one_test)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      49, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr account_;
    ::google::protobuf::internal::ArenaStringPtr password_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_5fproto_2fmysql_5fdatabase_5ftest_2eproto;
};// -------------------------------------------------------------------

class account_database_all_test final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:account_database_all_test) */ {
 public:
  inline account_database_all_test() : account_database_all_test(nullptr) {}
  ~account_database_all_test() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR account_database_all_test(::google::protobuf::internal::ConstantInitialized);

  inline account_database_all_test(const account_database_all_test& from)
      : account_database_all_test(nullptr, from) {}
  account_database_all_test(account_database_all_test&& from) noexcept
    : account_database_all_test() {
    *this = ::std::move(from);
  }

  inline account_database_all_test& operator=(const account_database_all_test& from) {
    CopyFrom(from);
    return *this;
  }
  inline account_database_all_test& operator=(account_database_all_test&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const account_database_all_test& default_instance() {
    return *internal_default_instance();
  }
  static inline const account_database_all_test* internal_default_instance() {
    return reinterpret_cast<const account_database_all_test*>(
               &_account_database_all_test_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(account_database_all_test& a, account_database_all_test& b) {
    a.Swap(&b);
  }
  inline void Swap(account_database_all_test* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(account_database_all_test* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  account_database_all_test* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<account_database_all_test>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const account_database_all_test& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const account_database_all_test& from) {
    account_database_all_test::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(account_database_all_test* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "account_database_all_test";
  }
  protected:
  explicit account_database_all_test(::google::protobuf::Arena* arena);
  account_database_all_test(::google::protobuf::Arena* arena, const account_database_all_test& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountPasswordFieldNumber = 1,
  };
  // repeated .account_database_one_test account_password = 1;
  int account_password_size() const;
  private:
  int _internal_account_password_size() const;

  public:
  void clear_account_password() ;
  ::account_database_one_test* mutable_account_password(int index);
  ::google::protobuf::RepeatedPtrField< ::account_database_one_test >*
      mutable_account_password();
  private:
  const ::google::protobuf::RepeatedPtrField<::account_database_one_test>& _internal_account_password() const;
  ::google::protobuf::RepeatedPtrField<::account_database_one_test>* _internal_mutable_account_password();
  public:
  const ::account_database_one_test& account_password(int index) const;
  ::account_database_one_test* add_account_password();
  const ::google::protobuf::RepeatedPtrField< ::account_database_one_test >&
      account_password() const;
  // @@protoc_insertion_point(class_scope:account_database_all_test)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::account_database_one_test > account_password_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_5fproto_2fmysql_5fdatabase_5ftest_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// account_database_one_test

// string account = 1;
inline void account_database_one_test::clear_account() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.account_.ClearToEmpty();
}
inline const std::string& account_database_one_test::account() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:account_database_one_test.account)
  return _internal_account();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void account_database_one_test::set_account(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.account_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:account_database_one_test.account)
}
inline std::string* account_database_one_test::mutable_account() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_account();
  // @@protoc_insertion_point(field_mutable:account_database_one_test.account)
  return _s;
}
inline const std::string& account_database_one_test::_internal_account() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.account_.Get();
}
inline void account_database_one_test::_internal_set_account(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.account_.Set(value, GetArena());
}
inline std::string* account_database_one_test::_internal_mutable_account() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.account_.Mutable( GetArena());
}
inline std::string* account_database_one_test::release_account() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:account_database_one_test.account)
  return _impl_.account_.Release();
}
inline void account_database_one_test::set_allocated_account(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.account_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.account_.IsDefault()) {
          _impl_.account_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:account_database_one_test.account)
}

// string password = 2;
inline void account_database_one_test::clear_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.password_.ClearToEmpty();
}
inline const std::string& account_database_one_test::password() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:account_database_one_test.password)
  return _internal_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void account_database_one_test::set_password(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.password_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:account_database_one_test.password)
}
inline std::string* account_database_one_test::mutable_password() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:account_database_one_test.password)
  return _s;
}
inline const std::string& account_database_one_test::_internal_password() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.password_.Get();
}
inline void account_database_one_test::_internal_set_password(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.password_.Set(value, GetArena());
}
inline std::string* account_database_one_test::_internal_mutable_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.password_.Mutable( GetArena());
}
inline std::string* account_database_one_test::release_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:account_database_one_test.password)
  return _impl_.password_.Release();
}
inline void account_database_one_test::set_allocated_password(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.password_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.password_.IsDefault()) {
          _impl_.password_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:account_database_one_test.password)
}

// -------------------------------------------------------------------

// database_node_db

// uint32 id = 1;
inline void database_node_db::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = 0u;
}
inline ::uint32_t database_node_db::id() const {
  // @@protoc_insertion_point(field_get:database_node_db.id)
  return _internal_id();
}
inline void database_node_db::set_id(::uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:database_node_db.id)
}
inline ::uint32_t database_node_db::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void database_node_db::_internal_set_id(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// string db_host = 2;
inline void database_node_db::clear_db_host() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.db_host_.ClearToEmpty();
}
inline const std::string& database_node_db::db_host() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:database_node_db.db_host)
  return _internal_db_host();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void database_node_db::set_db_host(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.db_host_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:database_node_db.db_host)
}
inline std::string* database_node_db::mutable_db_host() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_db_host();
  // @@protoc_insertion_point(field_mutable:database_node_db.db_host)
  return _s;
}
inline const std::string& database_node_db::_internal_db_host() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.db_host_.Get();
}
inline void database_node_db::_internal_set_db_host(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.db_host_.Set(value, GetArena());
}
inline std::string* database_node_db::_internal_mutable_db_host() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.db_host_.Mutable( GetArena());
}
inline std::string* database_node_db::release_db_host() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:database_node_db.db_host)
  return _impl_.db_host_.Release();
}
inline void database_node_db::set_allocated_db_host(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.db_host_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.db_host_.IsDefault()) {
          _impl_.db_host_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:database_node_db.db_host)
}

// string db_user = 3;
inline void database_node_db::clear_db_user() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.db_user_.ClearToEmpty();
}
inline const std::string& database_node_db::db_user() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:database_node_db.db_user)
  return _internal_db_user();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void database_node_db::set_db_user(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.db_user_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:database_node_db.db_user)
}
inline std::string* database_node_db::mutable_db_user() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_db_user();
  // @@protoc_insertion_point(field_mutable:database_node_db.db_user)
  return _s;
}
inline const std::string& database_node_db::_internal_db_user() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.db_user_.Get();
}
inline void database_node_db::_internal_set_db_user(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.db_user_.Set(value, GetArena());
}
inline std::string* database_node_db::_internal_mutable_db_user() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.db_user_.Mutable( GetArena());
}
inline std::string* database_node_db::release_db_user() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:database_node_db.db_user)
  return _impl_.db_user_.Release();
}
inline void database_node_db::set_allocated_db_user(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.db_user_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.db_user_.IsDefault()) {
          _impl_.db_user_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:database_node_db.db_user)
}

// string db_password = 4;
inline void database_node_db::clear_db_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.db_password_.ClearToEmpty();
}
inline const std::string& database_node_db::db_password() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:database_node_db.db_password)
  return _internal_db_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void database_node_db::set_db_password(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.db_password_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:database_node_db.db_password)
}
inline std::string* database_node_db::mutable_db_password() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_db_password();
  // @@protoc_insertion_point(field_mutable:database_node_db.db_password)
  return _s;
}
inline const std::string& database_node_db::_internal_db_password() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.db_password_.Get();
}
inline void database_node_db::_internal_set_db_password(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.db_password_.Set(value, GetArena());
}
inline std::string* database_node_db::_internal_mutable_db_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.db_password_.Mutable( GetArena());
}
inline std::string* database_node_db::release_db_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:database_node_db.db_password)
  return _impl_.db_password_.Release();
}
inline void database_node_db::set_allocated_db_password(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.db_password_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.db_password_.IsDefault()) {
          _impl_.db_password_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:database_node_db.db_password)
}

// string db_dbname = 5;
inline void database_node_db::clear_db_dbname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.db_dbname_.ClearToEmpty();
}
inline const std::string& database_node_db::db_dbname() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:database_node_db.db_dbname)
  return _internal_db_dbname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void database_node_db::set_db_dbname(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.db_dbname_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:database_node_db.db_dbname)
}
inline std::string* database_node_db::mutable_db_dbname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_db_dbname();
  // @@protoc_insertion_point(field_mutable:database_node_db.db_dbname)
  return _s;
}
inline const std::string& database_node_db::_internal_db_dbname() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.db_dbname_.Get();
}
inline void database_node_db::_internal_set_db_dbname(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.db_dbname_.Set(value, GetArena());
}
inline std::string* database_node_db::_internal_mutable_db_dbname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.db_dbname_.Mutable( GetArena());
}
inline std::string* database_node_db::release_db_dbname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:database_node_db.db_dbname)
  return _impl_.db_dbname_.Release();
}
inline void database_node_db::set_allocated_db_dbname(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.db_dbname_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.db_dbname_.IsDefault()) {
          _impl_.db_dbname_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:database_node_db.db_dbname)
}

// uint32 db_port = 6;
inline void database_node_db::clear_db_port() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.db_port_ = 0u;
}
inline ::uint32_t database_node_db::db_port() const {
  // @@protoc_insertion_point(field_get:database_node_db.db_port)
  return _internal_db_port();
}
inline void database_node_db::set_db_port(::uint32_t value) {
  _internal_set_db_port(value);
  // @@protoc_insertion_point(field_set:database_node_db.db_port)
}
inline ::uint32_t database_node_db::_internal_db_port() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.db_port_;
}
inline void database_node_db::_internal_set_db_port(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.db_port_ = value;
}

// -------------------------------------------------------------------

// account_database_all_test

// repeated .account_database_one_test account_password = 1;
inline int account_database_all_test::_internal_account_password_size() const {
  return _internal_account_password().size();
}
inline int account_database_all_test::account_password_size() const {
  return _internal_account_password_size();
}
inline void account_database_all_test::clear_account_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.account_password_.Clear();
}
inline ::account_database_one_test* account_database_all_test::mutable_account_password(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:account_database_all_test.account_password)
  return _internal_mutable_account_password()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::account_database_one_test>* account_database_all_test::mutable_account_password()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:account_database_all_test.account_password)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_account_password();
}
inline const ::account_database_one_test& account_database_all_test::account_password(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:account_database_all_test.account_password)
  return _internal_account_password().Get(index);
}
inline ::account_database_one_test* account_database_all_test::add_account_password() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::account_database_one_test* _add = _internal_mutable_account_password()->Add();
  // @@protoc_insertion_point(field_add:account_database_all_test.account_password)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::account_database_one_test>& account_database_all_test::account_password() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:account_database_all_test.account_password)
  return _internal_account_password();
}
inline const ::google::protobuf::RepeatedPtrField<::account_database_one_test>&
account_database_all_test::_internal_account_password() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.account_password_;
}
inline ::google::protobuf::RepeatedPtrField<::account_database_one_test>*
account_database_all_test::_internal_mutable_account_password() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.account_password_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_common_5fproto_2fmysql_5fdatabase_5ftest_2eproto_2epb_2eh
